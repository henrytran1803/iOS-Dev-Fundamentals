// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: calc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - calc.Calc

/// Namespace containing generated types for the "calc.Calc" service.
internal enum Calc_Calc {
    /// Service descriptor for the "calc.Calc" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "calc.Calc")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "Add" metadata.
        internal enum Add {
            /// Request type for "Add".
            internal typealias Input = Calc_AddRequest
            /// Response type for "Add".
            internal typealias Output = Calc_AddResponse
            /// Descriptor for "Add".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "calc.Calc"),
                method: "Add"
            )
        }
        /// Namespace for "Fibo" metadata.
        internal enum Fibo {
            /// Request type for "Fibo".
            internal typealias Input = Calc_FiboRequest
            /// Response type for "Fibo".
            internal typealias Output = Calc_FiboResponse
            /// Descriptor for "Fibo".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "calc.Calc"),
                method: "Fibo"
            )
        }
        /// Namespace for "ComputeAverage" metadata.
        internal enum ComputeAverage {
            /// Request type for "ComputeAverage".
            internal typealias Input = Calc_ComputeAverageRequest
            /// Response type for "ComputeAverage".
            internal typealias Output = Calc_ComputeAverageResponse
            /// Descriptor for "ComputeAverage".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "calc.Calc"),
                method: "ComputeAverage"
            )
        }
        /// Namespace for "FindMaximum" metadata.
        internal enum FindMaximum {
            /// Request type for "FindMaximum".
            internal typealias Input = Calc_FindMaximumRequest
            /// Response type for "FindMaximum".
            internal typealias Output = Calc_FindMaximumResponse
            /// Descriptor for "FindMaximum".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "calc.Calc"),
                method: "FindMaximum"
            )
        }
        /// Descriptors for all methods in the "calc.Calc" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            Add.descriptor,
            Fibo.descriptor,
            ComputeAverage.descriptor,
            FindMaximum.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "calc.Calc" service.
    internal static let calc_Calc = GRPCCore.ServiceDescriptor(fullyQualifiedService: "calc.Calc")
}

// MARK: calc.Calc (server)

extension Calc_Calc {
    /// Streaming variant of the service protocol for the "calc.Calc" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Add" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Calc_AddRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Calc_AddResponse` messages.
        func add(
            request: GRPCCore.StreamingServerRequest<Calc_AddRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Calc_AddResponse>

        /// Handle the "Fibo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Server Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Calc_FiboRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Calc_FiboResponse` messages.
        func fibo(
            request: GRPCCore.StreamingServerRequest<Calc_FiboRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Calc_FiboResponse>

        /// Handle the "ComputeAverage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Client Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Calc_ComputeAverageRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Calc_ComputeAverageResponse` messages.
        func computeAverage(
            request: GRPCCore.StreamingServerRequest<Calc_ComputeAverageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Calc_ComputeAverageResponse>

        /// Handle the "FindMaximum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Calc_FindMaximumRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Calc_FindMaximumResponse` messages.
        func findMaximum(
            request: GRPCCore.StreamingServerRequest<Calc_FindMaximumRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Calc_FindMaximumResponse>
    }

    /// Service protocol for the "calc.Calc" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: Calc_Calc.StreamingServiceProtocol {
        /// Handle the "Add" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary RPC method
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Calc_AddRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Calc_AddResponse` message.
        func add(
            request: GRPCCore.ServerRequest<Calc_AddRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Calc_AddResponse>

        /// Handle the "Fibo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Server Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Calc_FiboRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Calc_FiboResponse` messages.
        func fibo(
            request: GRPCCore.ServerRequest<Calc_FiboRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Calc_FiboResponse>

        /// Handle the "ComputeAverage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Client Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Calc_ComputeAverageRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Calc_ComputeAverageResponse` message.
        func computeAverage(
            request: GRPCCore.StreamingServerRequest<Calc_ComputeAverageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Calc_ComputeAverageResponse>

        /// Handle the "FindMaximum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Calc_FindMaximumRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Calc_FindMaximumResponse` messages.
        func findMaximum(
            request: GRPCCore.StreamingServerRequest<Calc_FindMaximumRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Calc_FindMaximumResponse>
    }

    /// Simple service protocol for the "calc.Calc" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: Calc_Calc.ServiceProtocol {
        /// Handle the "Add" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary RPC method
        ///
        /// - Parameters:
        ///   - request: A `Calc_AddRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Calc_AddResponse` to respond with.
        func add(
            request: Calc_AddRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Calc_AddResponse

        /// Handle the "Fibo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Server Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A `Calc_FiboRequest` message.
        ///   - response: A response stream of `Calc_FiboResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func fibo(
            request: Calc_FiboRequest,
            response: GRPCCore.RPCWriter<Calc_FiboResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "ComputeAverage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Client Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A stream of `Calc_ComputeAverageRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Calc_ComputeAverageResponse` to respond with.
        func computeAverage(
            request: GRPCCore.RPCAsyncSequence<Calc_ComputeAverageRequest, any Swift.Error>,
            context: GRPCCore.ServerContext
        ) async throws -> Calc_ComputeAverageResponse

        /// Handle the "FindMaximum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A stream of `Calc_FindMaximumRequest` messages.
        ///   - response: A response stream of `Calc_FindMaximumResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func findMaximum(
            request: GRPCCore.RPCAsyncSequence<Calc_FindMaximumRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Calc_FindMaximumResponse>,
            context: GRPCCore.ServerContext
        ) async throws
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Calc_Calc.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Calc_Calc.Method.Add.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_AddRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_AddResponse>(),
            handler: { request, context in
                try await self.add(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Calc_Calc.Method.Fibo.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_FiboRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_FiboResponse>(),
            handler: { request, context in
                try await self.fibo(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Calc_Calc.Method.ComputeAverage.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_ComputeAverageRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_ComputeAverageResponse>(),
            handler: { request, context in
                try await self.computeAverage(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Calc_Calc.Method.FindMaximum.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_FindMaximumRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_FindMaximumResponse>(),
            handler: { request, context in
                try await self.findMaximum(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Calc_Calc.ServiceProtocol {
    internal func add(
        request: GRPCCore.StreamingServerRequest<Calc_AddRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Calc_AddResponse> {
        let response = try await self.add(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func fibo(
        request: GRPCCore.StreamingServerRequest<Calc_FiboRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Calc_FiboResponse> {
        let response = try await self.fibo(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    internal func computeAverage(
        request: GRPCCore.StreamingServerRequest<Calc_ComputeAverageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Calc_ComputeAverageResponse> {
        let response = try await self.computeAverage(
            request: request,
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Calc_Calc.SimpleServiceProtocol {
    internal func add(
        request: GRPCCore.ServerRequest<Calc_AddRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Calc_AddResponse> {
        return GRPCCore.ServerResponse<Calc_AddResponse>(
            message: try await self.add(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func fibo(
        request: GRPCCore.ServerRequest<Calc_FiboRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Calc_FiboResponse> {
        return GRPCCore.StreamingServerResponse<Calc_FiboResponse>(
            metadata: [:],
            producer: { writer in
                try await self.fibo(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    internal func computeAverage(
        request: GRPCCore.StreamingServerRequest<Calc_ComputeAverageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Calc_ComputeAverageResponse> {
        return GRPCCore.ServerResponse<Calc_ComputeAverageResponse>(
            message: try await self.computeAverage(
                request: request.messages,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func findMaximum(
        request: GRPCCore.StreamingServerRequest<Calc_FindMaximumRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Calc_FindMaximumResponse> {
        return GRPCCore.StreamingServerResponse<Calc_FindMaximumResponse>(
            metadata: [:],
            producer: { writer in
                try await self.findMaximum(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }
}

// MARK: calc.Calc (client)

extension Calc_Calc {
    /// Generated client protocol for the "calc.Calc" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "Add" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary RPC method
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Calc_AddRequest` message.
        ///   - serializer: A serializer for `Calc_AddRequest` messages.
        ///   - deserializer: A deserializer for `Calc_AddResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func add<Result>(
            request: GRPCCore.ClientRequest<Calc_AddRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_AddRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_AddResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_AddResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Fibo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Server Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Calc_FiboRequest` message.
        ///   - serializer: A serializer for `Calc_FiboRequest` messages.
        ///   - deserializer: A deserializer for `Calc_FiboResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func fibo<Result>(
            request: GRPCCore.ClientRequest<Calc_FiboRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_FiboRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_FiboResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FiboResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ComputeAverage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Client Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Calc_ComputeAverageRequest` messages.
        ///   - serializer: A serializer for `Calc_ComputeAverageRequest` messages.
        ///   - deserializer: A deserializer for `Calc_ComputeAverageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func computeAverage<Result>(
            request: GRPCCore.StreamingClientRequest<Calc_ComputeAverageRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_ComputeAverageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_ComputeAverageResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_ComputeAverageResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FindMaximum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Calc_FindMaximumRequest` messages.
        ///   - serializer: A serializer for `Calc_FindMaximumRequest` messages.
        ///   - deserializer: A deserializer for `Calc_FindMaximumResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func findMaximum<Result>(
            request: GRPCCore.StreamingClientRequest<Calc_FindMaximumRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_FindMaximumRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_FindMaximumResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FindMaximumResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "calc.Calc" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Add" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Unary RPC method
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Calc_AddRequest` message.
        ///   - serializer: A serializer for `Calc_AddRequest` messages.
        ///   - deserializer: A deserializer for `Calc_AddResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func add<Result>(
            request: GRPCCore.ClientRequest<Calc_AddRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_AddRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_AddResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_AddResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Calc_Calc.Method.Add.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Fibo" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Server Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Calc_FiboRequest` message.
        ///   - serializer: A serializer for `Calc_FiboRequest` messages.
        ///   - deserializer: A deserializer for `Calc_FiboResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func fibo<Result>(
            request: GRPCCore.ClientRequest<Calc_FiboRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_FiboRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_FiboResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FiboResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Calc_Calc.Method.Fibo.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ComputeAverage" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Client Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Calc_ComputeAverageRequest` messages.
        ///   - serializer: A serializer for `Calc_ComputeAverageRequest` messages.
        ///   - deserializer: A deserializer for `Calc_ComputeAverageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func computeAverage<Result>(
            request: GRPCCore.StreamingClientRequest<Calc_ComputeAverageRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_ComputeAverageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_ComputeAverageResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_ComputeAverageResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.clientStreaming(
                request: request,
                descriptor: Calc_Calc.Method.ComputeAverage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FindMaximum" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Bidirectional Streaming RPC method
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Calc_FindMaximumRequest` messages.
        ///   - serializer: A serializer for `Calc_FindMaximumRequest` messages.
        ///   - deserializer: A deserializer for `Calc_FindMaximumResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func findMaximum<Result>(
            request: GRPCCore.StreamingClientRequest<Calc_FindMaximumRequest>,
            serializer: some GRPCCore.MessageSerializer<Calc_FindMaximumRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Calc_FindMaximumResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FindMaximumResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Calc_Calc.Method.FindMaximum.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Calc_Calc.ClientProtocol {
    /// Call the "Add" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Unary RPC method
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Calc_AddRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func add<Result>(
        request: GRPCCore.ClientRequest<Calc_AddRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_AddResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.add(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_AddRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_AddResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Fibo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Server Streaming RPC method
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Calc_FiboRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func fibo<Result>(
        request: GRPCCore.ClientRequest<Calc_FiboRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FiboResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.fibo(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_FiboRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_FiboResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ComputeAverage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Client Streaming RPC method
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Calc_ComputeAverageRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func computeAverage<Result>(
        request: GRPCCore.StreamingClientRequest<Calc_ComputeAverageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_ComputeAverageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.computeAverage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_ComputeAverageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_ComputeAverageResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FindMaximum" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Bidirectional Streaming RPC method
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Calc_FindMaximumRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func findMaximum<Result>(
        request: GRPCCore.StreamingClientRequest<Calc_FindMaximumRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FindMaximumResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.findMaximum(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Calc_FindMaximumRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Calc_FindMaximumResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Calc_Calc.ClientProtocol {
    /// Call the "Add" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Unary RPC method
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func add<Result>(
        _ message: Calc_AddRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_AddResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Calc_AddRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.add(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Fibo" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Server Streaming RPC method
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func fibo<Result>(
        _ message: Calc_FiboRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FiboResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Calc_FiboRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.fibo(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ComputeAverage" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Client Streaming RPC method
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func computeAverage<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Calc_ComputeAverageRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Calc_ComputeAverageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Calc_ComputeAverageRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.computeAverage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FindMaximum" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Bidirectional Streaming RPC method
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func findMaximum<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Calc_FindMaximumRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Calc_FindMaximumResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Calc_FindMaximumRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.findMaximum(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}