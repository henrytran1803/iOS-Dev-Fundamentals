// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos (
    user_id, title, description, priority, deadline
) VALUES (
             ?, ?, ?, ?, ?
         )
`

type CreateTodoParams struct {
	UserID      int32             `json:"user_id"`
	Title       string            `json:"title"`
	Description sql.NullString    `json:"description"`
	Priority    string `json:"priority"`
	Deadline    sql.NullTime      `json:"deadline"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.Deadline,
	)
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const deleteTodosByUser = `-- name: DeleteTodosByUser :exec
DELETE FROM todos WHERE user_id = ?
`

func (q *Queries) DeleteTodosByUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodosByUser, userID)
	return err
}

const deleteUserTodos = `-- name: DeleteUserTodos :exec
DELETE FROM todos
WHERE user_id = ?
`

func (q *Queries) DeleteUserTodos(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserTodos, userID)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, user_id, title, description, priority, deadline, created_at, status FROM todos
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Deadline,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, user_id, title, description, priority, deadline, created_at, status FROM todos
ORDER BY created_at DESC
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Deadline,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosByPriority = `-- name: ListTodosByPriority :many
SELECT id, user_id, title, description, priority, deadline, created_at, status FROM todos
WHERE user_id = ? AND priority = ?
ORDER BY created_at DESC
`

type ListTodosByPriorityParams struct {
	UserID   int32             `json:"user_id"`
	Priority NullTodosPriority `json:"priority"`
}

func (q *Queries) ListTodosByPriority(ctx context.Context, arg ListTodosByPriorityParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodosByPriority, arg.UserID, arg.Priority)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Deadline,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosByStatus = `-- name: ListTodosByStatus :many
SELECT id, user_id, title, description, priority, deadline, created_at, status FROM todos
WHERE user_id = ? AND status = ?
ORDER BY created_at DESC
`

type ListTodosByStatusParams struct {
	UserID int32        `json:"user_id"`
	Status sql.NullBool `json:"status"`
}

func (q *Queries) ListTodosByStatus(ctx context.Context, arg ListTodosByStatusParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodosByStatus, arg.UserID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Deadline,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosByUser = `-- name: ListTodosByUser :many
SELECT id, user_id, title, description, priority, deadline, created_at, status FROM todos
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListTodosByUser(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodosByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Deadline,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET
    title = ?,
    description = ?,
    priority = ?,
    deadline = ?
WHERE id = ?
`

type UpdateTodoParams struct {
	Title       string            `json:"title"`
	Description sql.NullString    `json:"description"`
	Priority    NullTodosPriority `json:"priority"`
	Deadline    sql.NullTime      `json:"deadline"`
	ID          int32             `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.Deadline,
		arg.ID,
	)
	return err
}

const updateTodoStatus = `-- name: UpdateTodoStatus :exec
UPDATE todos
SET status = ?
WHERE id = ?
`

type UpdateTodoStatusParams struct {
	Status sql.NullBool `json:"status"`
	ID     int32        `json:"id"`
}

func (q *Queries) UpdateTodoStatus(ctx context.Context, arg UpdateTodoStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTodoStatus, arg.Status, arg.ID)
	return err
}
